#####Recursive
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """
        if not root:
            return []
        res = []
        
        self.helper(root, root.val, sum, res, [])
        return res
    
    def helper(self, node, total, sum, res, path):
        if node:
            if not node.left and not node.right:
                if total == sum:
                    path.append(node.val)
                    res.append(path)
            
            if node.left:
                
                self.helper(node.left,total+node.left.val, sum, res, path+[node.val])
            if node.right and path != None:
                self.helper(node.right,total+node.right.val, sum, res, path+[node.val])

##########Iterative
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """
        if not root:
            return []
        res = []
      
        stack = [(root, root.val, [])]
        while stack:
            node, total, path = stack.pop()
            if node:
                
                if not node.left and not node.right:
                    if total == sum:
                        path.append(node.val)
                        res.append(path)
            
                if node.right:
                    
                    stack.append((node.right, total+node.right.val, path+[node.val]))
                if node.left:
                    stack.append((node.left,total+node.left.val, path+[node.val]))
        return res
