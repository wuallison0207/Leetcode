class Solution(object):
    def numberOfPatterns(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
        res = 0
        visited = [False]*10
        jump = [[0]*10 for _ in range(10)]
        jump[1][3] = jump[3][1] = 2
        jump[4][6] = jump[6][4] = 5
        jump[7][9] = jump[9][7] = 8
        jump[1][7] = jump[7][1] = 4
        jump[2][8] = jump[8][2] = 5
        jump[3][9] = jump[9][3] = 6
        jump[1][9] = jump[9][1] = jump[3][7] = jump[7][3] = 5
        res += self.helper(1, 1, res, m, n, jump, visited) * 4
        res += self.helper(2, 1, res, m, n, jump, visited) * 4
        res += self.helper(5, 1, res, m, n, jump, visited)
        return res
   def helper(self, num, len, res, m, n, jump, visited):
        if len >= m: 
            res += 1
        
        if len+1 > n: return res
        visited[num] = True
        for next in range(1, 10):
            j = jump[num][next]
            if not visited[next] and (j == 0 or visited[j]):
                res = self.helper(next, len+1, res, m, n, jump, visited)
        visited[num] = False
        return res
            

    
