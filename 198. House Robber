###bottom up
class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums: return 0
        if len(nums) == 1: return nums[0]
        dp = [0]*len(nums)
        dp[0] = nums[0]
        dp[1] = max(dp[0], nums[1])
        for i in range(2, len(nums)):
            dp[i] = max(nums[i]+dp[i-2], dp[i-1])
        
        return dp[-1]
        
###top down
class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums: return 0
        if len(nums) == 1: return nums[0]
        if sum(nums) == 0: return 0
        memo = [0]*len(nums)
        
        return self.helper(nums, len(nums)-1, memo)
         
    
    def helper(self, nums, i, memo):
        if i == 0:
            return nums[0]
        if i == 1: 
            return max(nums[0], nums[1])
        if memo[i] != 0: return memo[i]
        
        memo[i] = max(nums[i]+self.helper(nums, i-2, memo), self.helper(nums,i-1,memo))
        
        return memo[i]
