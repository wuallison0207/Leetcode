# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def recoverTree(self, root):
        """
        :type root: TreeNode
        :rtype: None Do not return anything, modify root in-place instead.
        """
        pre, first, second, temp = None, None, None, None
        
        while root:
            if root.left:
                temp = root.left
                while temp.right and temp.right != root:
                    temp = temp.right
                if temp.right:# the thread already exists
                    if pre and pre.val > root.val:
                        if not first:
                            first, second = pre, root
                        else:
                            second = root
                    pre = root
                    temp.right = None
                    root = root.right
                else:# construct a thread
                    temp.right = root
                    root = root.left
                    
                
            else:
                if pre and pre.val > root.val:
                    if not first:
                        first, second = pre, root
                    else:
                        second = root
                pre = root
                root = root.right
        if first and second:
            t = second.val
            second.val = first.val
            first.val = t
        return root
