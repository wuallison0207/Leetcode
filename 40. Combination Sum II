class Solution(object):
    def combinationSum2(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        res = []
        nums = sorted(candidates)
        inuse = [False]*len(nums)
        self.helper(nums, res, [], target, inuse, 0)
        return res
    
    def helper(self, nums, res, path, target, inuse, start):
        if sum(path) > target:
            return 
        if sum(path) == target:
            res.append(path)
            
        for i in range(start, len(nums)):
            if i > start and nums[i] == nums[i-1] and not inuse[i-1]:
                continue
            inuse[i] = True
            self.helper(nums, res, path+[nums[i]], target, inuse, i+1)
            inuse[i] = False
