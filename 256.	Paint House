###Top down
class Solution(object):
    def minCost(self, costs):
        """
        :type costs: List[int]
        :rtype: int
        """
        n = len(costs)
        memo = [[0]*(n+1) for _ in range(3)]
        memo[0] = costs[0]
        
        res = self.helper(costs, n, memo)
        return res[0]
        
    def helpse(self, costs, i, memo):
        
        ans = self.helper(costs, i-1, memo)
        minicost = float('Inf')
        ind = -1
        for j in range(3):
            if ans[1] == j: continue
            if ans[0]+costs[i][j] < minicost:
                minicost = ans[0]+costs[i][j]
                ind = j
        memo[i] = [minicost, j]
        return memo[i]
            
        
###bottom up
class Solution(object):
    def minCost(self, costs):
        """
        :type costs: List[int]
        :rtype: int
        """
        n = len(costs)
        dp = [[0]*(n+1) for _ in range(3)]
        
        dp[0] = costs[0]
        
        for i in range(1, n+1):
            dp[i][0] = costs[i][0] + min(dp[i-1][1], dp[i-1][2])
            dp[i][1] = costs[i][1] + min(dp[i-1][0], dp[i-1][2])
            dp[i][2] = costs[i][2] = min(dp[i-1][0], dp[i-1][1])
        return min(dp[-1])
        
