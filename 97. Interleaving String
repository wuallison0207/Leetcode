###bottom up
class Solution(object):
    def isInterleave(self, s1, s2, s3):
        """
        :type s1: str
        :type s2: str
        :type s3: str
        :rtype: bool
        """
        n1, n2 = len(s1), len(s2)
        if n1+n2 != len(s3): return False
        dp = [[False]*(n2+1) for _ in range(n1+1)]
    
        
        for i in range(n1+1):
            for j in range(n2+1):
                if i == 0 and j ==0:
                    dp[i][j] = True
                    continue
                if i == 0:
                    dp[i][j] = dp[i][j-1] and (s2[j-1] == s3[i+j-1])
                    continue
                if j ==0:
                    dp[i][j] = dp[i-1][j] and (s1[i-1] == s3[i+j-1])
                    continue
                dp[i][j] = (dp[i-1][j] and (s1[i-1] == s3[i+j-1])) or (dp[i][j-1] and (s2[j-1] == s3[i+j-1]))
            
        return dp[-1][-1]
        
 ###top down
class Solution(object):
    def isInterleave(self, s1, s2, s3):
        """
        :type s1: str
        :type s2: str
        :type s3: str
        :rtype: bool
        """
        n1, n2 = len(s1), len(s2)
        if n1+n2 != len(s3): return False
        if not s1 and not s2: return True
        if not s1: return s2 == s3
        if not s2: return s1 == s3
        memo = [[-1]*(n2+1) for _ in range(n1+1)]
        memo[0][0] = True
        self.helper(n1,n2,s1,s2,s3,memo)
        return memo[-1][-1]
    
    def helper(i, j, s1, s2, s3, memo):
        if memp[i][j] != -1: return memo[i][j]
        
        
        if i == 0:
            memo[i][j] = self.helper(i,j-1,s1,s2,s3,memo) and (s2[j-1] == s3[i+j-1])
            return memo[i][j]
                    
        if j == 0:
            memo[i][j] = self.helper(i-1,j,s1,s2,s3,memo) and (s1[i-1] == s3[i+j-1])
            return memo[i][j]
                    
        memo[i][j] = (self.helper(i-1,j,s1,s2,s3,memo) and (s1[i-1] == s3[i+j-1])) or (self.helper(i,j-1,s1,s2,s3,memo) and (s2[j-1] == s3[i+j-1]))
            
        return memo[i][j]       
