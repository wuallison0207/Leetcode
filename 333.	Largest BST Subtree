# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def largestBSTSubtree(self, root):
        """
        :type root: list[int]
        :rtype: int
        """
        res = [float('-Inf'), float('Inf'), 0]
        self.helper(root, res)
        return res[2]
        
    def helper(self, node, [mn, mx, cnt]):
        if not root: return
        l = [float('-Inf'), float('Inf'), 0]
        r = [float('-Inf'), float('Inf'), 0]
        self.helper(node.left, l)
        self.helper(node.right, r)
        if (not node.left or node.val > node.left.val) and (not node.right or node.val < node.right.val):
            cnt = l[2]+r[2]+1
        else:
            cnt = max(l[2], r[2])
        if not node.left:
            mn = node.val
        else:
            mn = l[0]
        if not node.right:
            mx = node.val
        else:
            mx = r[1]
       
