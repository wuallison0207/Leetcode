###top down
class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        if not word1 and not word2: return 0
        if not word1: return len(word2)
        if not word2: return len(word1)
        memo = [[-1]*len(word2) for _ in range(len(word1))]
        
        self.helper(0, 0, word1, word2, memo)
        
        
        
    def helper(self, i, j, word1, word2, memo):
        
        
        if i == len(word1) and j == len(word2): return 0
        if i == len(word1):
            return len(word2) - j
        if j == len(word2):
            return len(word1) - i
        
        if memo[i][j] != -1: return memo[i][j]
        
        if word1[i] == word2[j]:
            ans = self.helper(i+1, j+1, word1, word2, memo)
        else:
            insert = 1+ self.helper(i, j+1, word1, word2, memo)
            delete = 1+ self.helper(i+1, j, word1, word2, memo)
            replace = 1+self.helper(i+1, j+1, word1, word2, memo)
            ans = min(insert, delete, replace)
        memo[i][j] = ans
        return memo[i][j]

###bottom up
class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        
        dp = [[-1]*(len(word2)+1) for _ in range(len(word1)+1)]
        for i in range(len(word1)+1):
            dp[i][0] = i
        for j in range(len(word2)+1):
            dp[0][j] = j
        dp[0][0] = 0
        
       
        for i in range(1, len(word1)+1):
            for j in range(1, len(word2)+1):
                if word1[i-1] == word2[j-1]:
                    dp[i][j] = dp[i-1][j-1]
                    continue
                dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i][j-1])+1
                
        return dp[-1][-1]
