###bottom up
class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m, n = len(grid), len(grid[0])
        dp = [[float('Inf')]*(n+1) for _ in range(m+1)]
        dp[1][1] = grid[0][0]
        for r in range(1, m+1):
            for c in range(1, n+1):
                if r == 1 and c == 1: continue
                
                dp[r][c] = min(dp[r-1][c], dp[r][c-1]) + grid[r-1][c-1]
        return dp[m][n]

###top down
class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m, n = len(grid), len(grid[0])
        memo = [[-1]*(n+1) for _ in range(m+1)]
        
        return self.helper(m, n, grid, memo)
        
    def helper(self, r, c, grid, memo):    
        if memo[r][c] != -1: return memo[r][c]
        if r < 1 or c < 1: return float('Inf')
        if r == 1 and c == 1: return grid[0][0]
        
        memo[r][c] = min(self.helper(r-1, c, grid, memo), self.helper(r, c-1, grid, memo)) + grid[r-1][c-1]
        return memo[r][c]
