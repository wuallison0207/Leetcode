###top-down
class Solution(object):
    def coinChange(self, coins, amount):
        """
        :type coins: List[int]
        :type amount: int
        :rtype: int
        """
        if amount < 1: return 0
        memo = [0]*(amount+1)
        self.helper(coins, amount, memo)
        return memo[amount]
    
    def helper(self, coins, rem, memo):
        if rem < 0:
            return -1
        if rem == 0:
            return 0
        if memo[rem] != 0: return memo[rem]
        mincoin = float('Inf')
        for coin in coins:
            ans = self.helper(coins, rem-coin, memo)
            if ans >= 0 and ans < mincoin:
                mincoin = ans + 1
        memo[rem] = mincoin if mincoin != float('Inf') else -1
        return memo[rem]

###bottom up
class Solution(object):
    def coinChange(self, coins, amount):
        """
        :type coins: List[int]
        :type amount: int
        :rtype: int
        """
        if amount < 1: return 0
        dp = [0]+[float('Inf')]*amount
        
        
        for total in range(1, amount+1):
            
            for coin in coins:
                if total >= coin:
                    
                    dp[total] = min(dp[total], dp[total-coin]+1)
        if dp[amount] == float('Inf'):
            return -1
           
        return dp[amount]
