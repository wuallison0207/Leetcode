###Iterative
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        res = []
        stack = [(root, 0)]
        while stack:
            node, level = stack.pop()
            if node:
                if len(res) < level+1:
                    res.append([])
                if level%2==0:
                    res[level].append(node.val)
                else:
                    res[level].insert(0, node.val)
                
                stack.append((node.right, level+1))
                stack.append((node.left, level+1))
        return res
###Recursive
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        res = []
        self.helper(root, 0, res)
        return res

    
    def helper(self, node, level, res):
            if node:
                if len(res) < level+1:
                    res.append([])
                if level%2==0:
                    res[level].append(node.val)
                else:
                    res[level].insert(0, node.val)
                
                if node.left:
                    self.helper(node.left, level+1, res)
                if node.right:
                    self.helper(node.right, level+1, res)
        
     
     
