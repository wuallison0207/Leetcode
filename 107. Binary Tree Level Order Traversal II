###Recursive
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrderBottom(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        res = []
        self.getLeaves(root, 0, res)
        return res
        
    def getLeaves(self, node, level, res):
        if node:
            if len(res)<level+1:
                res.insert(0, [])
                
            res[-(level+1)].append(node.val)
            self.getLeaves(node.left, level+1, res)
            self.getLeaves(node.right, level+1, res)
            
###Iterative
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrderBottom(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        res = []
        stack = [(root, 0)]
        
        
        while stack:
            node, level = stack.pop()
            if node:
                if len(res)<level+1:
                    res.insert(0, [])
                res[-(level+1)].append(node.val)
                if node.right:
                    stack.append((node.right, level+1))
                if node.left:
                    stack.append((node.left, level+1))
            
            
        return res
