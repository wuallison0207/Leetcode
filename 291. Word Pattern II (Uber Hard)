from sets import Set
class Solution(object):
    def wordPatternMatch(self, pattern, string):
        """
        :type nums: string
        :rtype: boolean
        """
        mmap = {}
        sset = set({})
        return self.helper(pattern, string, 0, 0, mmap, sset)
        
    def helper(self, pat, str, i, j, mmap, sset):
        #base case
        if i == len(str) and j == len(pat): return True
        if i == len(str) or j == len(pat): return False
        
        #get current pattern
        c = pat[j]
        
        #pattern is saved
        if mmap[c]:
            s = mmap[c]
            # then check if we can use it to match str[i...i+s.length()]
            if !str.startwith(s, i, i+len(s)): return False
            # check if next pattern is correct
            return self.helper(pat, str, i+len(s), j+1, mmap, sset)
        #pattern is not saved
        for k in range(i+1, len(str)):
            p = str[i,k+1]
            if p in sset: continue
            mmap[c] = p
            sset.add(p)
            # continue to match the rest
            if self.helper(pat, str, k+1, j+1, mmap, sset): 
                return True
            mmap.remove(c)
            sset.remove(c)
        # we have tried our best and still no luck
        return False




