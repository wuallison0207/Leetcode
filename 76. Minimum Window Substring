class Solution(object):
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        if not t or not s: return ""
        
        dict_t = collections.Counter(t)
        required = len(dict_t)
        formed = 0
        filtered_s = []
        for i, c in enumerate(s):
            if c in dict_t:
                filtered_s.append((i,c))
        r,l = 0,0
        
        window_counts = {}
        ans = float('Inf'), None, None
        while r < len(filtered_s):
            char = filtered_s[r][1]
            window_counts[char] = window_counts.get(char,0)+1
            if window_counts[char] == dict_t[char]:
                formed += 1
            
            while l <= r and formed == required:
                char = filtered_s[l][1]
                
                end = filtered_s[r][0]
                start = filtered_s[l][0]
                if end-start+1<ans[0]:
                    ans = (end-start+1, start, end)
                window_counts[char] -= 1
                if window_counts[char] < dict_t[char]:
                    formed -= 1
                l += 1
            r += 1
        return "" if ans[0] == float('Inf') else s[ans[1]: ans[2]+1]
