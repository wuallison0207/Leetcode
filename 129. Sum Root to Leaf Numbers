###recursive
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sumNumbers(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        res = []
        
        self.helper(root, [], res)
        return sum([int(v) for v in res])
        
        
    def helper(self, node, path, res):
        if node:
            if not node.left and not node.right:
                path.append(node.val)
                res.append("".join(map(str, path)))
                return
            if node.left:
                self.helper(node.left, path+[node.val], res)
            if node.right:
                self.helper(node.right, path+[node.val], res)
   ###Iterative
   # Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sumNumbers(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        res = []
        stack = [(root, [], res)]
        while stack:
            node, path, res = stack.pop()
            if node:
                if not node.left and not node.right:
                    path.append(node.val)
                    res.append("".join(map(str, path)))
                    continue
                if node.left:
                    stack.append((node.left, path+[node.val], res))
                if node.right:
                    stack.append((node.right, path+[node.val], res))
        return sum([int(v) for v in res])
