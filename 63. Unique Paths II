class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        if obstacleGrid[0][0]==1:
            return 0
        m,n = len(obstacleGrid), len(obstacleGrid[0])
        if m == 1 or n == 1:
            if sum(sum(obstacleGrid, [])) > 0:
                return 0
            else:
                return 1
        dp = [[0]*n for _ in range(m)]
        dp[0][0] = 1
        for r in range(1, m):
            if obstacleGrid[r][0] == 1:
                dp[r][0] = 0
            else:
                dp[r][0] = dp[r-1][0]
        
        for c in range(1, n):
            if obstacleGrid[0][c] == 1:
                dp[0][c] = 0
            else:
                dp[0][c] = dp[0][c-1]
            
        for r in range(1, m):
            for c in range(1, n):
                if obstacleGrid[r][c] == 1:
                    dp[r][c] = 0
                else:
                    dp[r][c] = dp[r-1][c]+dp[r][c-1]
        return dp[-1][-1]
